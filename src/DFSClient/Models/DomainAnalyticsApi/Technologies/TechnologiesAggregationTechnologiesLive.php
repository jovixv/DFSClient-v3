<?php

namespace DFSClientV3\Models\DomainAnalyticsApi\Technologies;

use DFSClientV3\Entity\Custom\TechnologiesAggregationTechnologiesLiveEntityMain;
use DFSClientV3\Models\AbstractModel;

class TechnologiesAggregationTechnologiesLive extends AbstractModel
{
    protected $method = 'POST';

    protected $isSupportedMerge = true;

    protected $pathToMainData = 'tasks->{$postID}->result';

    protected $requestToFunction = 'domain_analytics/technologies/aggregation_technologies/live';

    protected $resultShouldBeTransformedToArray = true;

    protected $useNewMapper = true;

    /**
     * @return TechnologiesAggregationTechnologiesLiveEntityMain
     */
    #[\Override]
    public function get(): TechnologiesAggregationTechnologiesLiveEntityMain
    {
        return parent::get();
    }

    /**
     * @param string $keyword
     *
     * @return $this
     */
    public function setKeyword(string $keyword)
    {
        $this->payload['keyword'] = $keyword;

        return $this;
    }

    /**
     * @param string $group
     *
     * @return $this
     */
    public function setGroup(string $group)
    {
        $this->payload['group'] = $group;

        return $this;
    }

    /**
     * @param string $category
     *
     * @return $this
     */
    public function setCategory(string $category)
    {
        $this->payload['category'] = $category;

        return $this;
    }

    /**
     * @param string $technology
     *
     * @return $this
     */
    public function setTechnology(string $technology)
    {
        $this->payload['technology'] = $technology;

        return $this;
    }

    /**
     * @param string $mode
     *
     * @return $this
     */
    public function setMode(string $mode)
    {
        $this->payload['mode'] = $mode;

        return $this;
    }

    /**
     * @param int $internalGroupsListLimit
     *
     * @return $this
     */
    public function setInternalGroupsListLimit(int $internalGroupsListLimit)
    {
        $this->payload['internal_groups_list_limit'] = $internalGroupsListLimit;

        return $this;
    }

    /**
     * @param int $internalCategoriesListLimit
     *
     * @return $this
     */
    public function setInternalCategoriesListLimit(int $internalCategoriesListLimit)
    {
        $this->payload['internal_categories_list_limit'] = $internalCategoriesListLimit;

        return $this;
    }

    /**
     * @param int $internalTechnologiesListLimit
     *
     * @return $this
     */
    public function setInternalTechnologiesListLimit(int $internalTechnologiesListLimit)
    {
        $this->payload['internal_technologies_list_limit'] = $internalTechnologiesListLimit;

        return $this;
    }

    /**
     * @param int $internalListLimit
     *
     * @return $this
     */
    public function setInternalListLimit(int $internalListLimit)
    {
        $this->payload['internal_list_limit'] = $internalListLimit;

        return $this;
    }

    /**
     * @param array $filters
     *
     * @return $this
     */
    public function setFilters(array $filters)
    {
        $this->payload['filters'] = $filters;

        return $this;
    }

    /**
     * @param array $orderBy
     *
     * @return $this
     */
    public function setOrderBy(array $orderBy)
    {
        $this->payload['order_by'] = $orderBy;

        return $this;
    }

    /**
     * @param int $limit
     *
     * @return $this
     */
    public function setLimit(int $limit)
    {
        $this->payload['limit'] = $limit;

        return $this;
    }

    /**
     * @param int $offset
     *
     * @return $this
     */
    public function setOffset(int $offset)
    {
        $this->payload['offset'] = $offset;

        return $this;
    }

    /**
     * @param string $tag
     *
     * @return $this
     */
    public function setTag(string $tag)
    {
        $this->payload['tag'] = $tag;

        return $this;
    }

    /**
     * @param array $modelPool
     *
     * @throws \Exception
     *
     * @return array
     */
    #[\Override]
    public static function getAfterMerge(array $modelPool)
    {
        return parent::getAfterMerge($modelPool); // TODO: Change the autogenerated stub
    }
}
