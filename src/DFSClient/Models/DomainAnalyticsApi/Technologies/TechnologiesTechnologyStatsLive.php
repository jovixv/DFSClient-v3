<?php

namespace DFSClientV3\Models\DomainAnalyticsApi\Technologies;

use DFSClientV3\Entity\Custom\TechnologiesTechnologyStatsLiveEntityMain;
use DFSClientV3\Models\AbstractModel;

class TechnologiesTechnologyStatsLive extends AbstractModel
{
    protected $method = 'POST';

    protected $isSupportedMerge = true;

    protected $pathToMainData = 'tasks->{$postID}->result';

    protected $requestToFunction = 'domain_analytics/technologies/technology_stats/live';

    protected $resultShouldBeTransformedToArray = true;

    protected $useNewMapper = true;

    /**
     * @return TechnologiesTechnologyStatsLiveEntityMain
     */
    #[\Override]
    public function get(): TechnologiesTechnologyStatsLiveEntityMain
    {
        return parent::get();
    }

    /**
     * @param string $technology
     *
     * @return $this
     */
    public function setTechnology(string $technology)
    {
        $this->payload['technology'] = $technology;

        return $this;
    }

    /**
     * @param string $date_from
     *
     * @return $this
     */
    public function setDateFrom(string $date_from)
    {
        $this->payload['date_from'] = $date_from;

        return $this;
    }

    /**
     * @param string $date_to
     *
     * @return $this
     */
    public function setDateTo(string $date_to)
    {
        $this->payload['date_to'] = $date_to;

        return $this;
    }

    /**
     * @param string $tag
     *
     * @return $this
     */
    public function setTag(string $tag)
    {
        $this->payload['tag'] = $tag;

        return $this;
    }

    /**
     * @param array $modelPool
     *
     * @throws \Exception
     *
     * @return array
     */
    #[\Override]
    public static function getAfterMerge(array $modelPool)
    {
        return parent::getAfterMerge($modelPool); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    #[\Override]
    protected function initCustomFunctionForPaths(): array
    {
        return [
            'tasks->(:number)->result->(:number)->items->(:number)->countries'    => fn ($key, $value) => (array) $value,
            'tasks->(:number)->result->(:number)->items->(:number)->languages'    => fn ($key, $value) => (array) $value,
            'tasks->(:number)->result->(:number)->items->(:number)->domains_rank' => fn ($key, $value) => (array) $value,
        ];
    }
}
